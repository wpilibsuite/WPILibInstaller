

apply plugin: 'de.undercouch.download'


def downloadLinuxJdk = tasks.register('downloadLinuxJdk', Download) {
  src 'https://download.java.net/java/ga/jdk11/openjdk-11_linux-x64_bin.tar.gz'
  dest buildDir
  overwrite false
}

def jdkLinuxFile = file("$buildDir/openjdk-11_linux-x64_bin.tar.gz")

def downloadMacJdk = tasks.register('downloadMacJdk', Download) {
  src 'https://download.java.net/java/ga/jdk11/openjdk-11_osx-x64_bin.tar.gz'
  dest buildDir
  overwrite false
}

def jdkMacFile = file("$buildDir/openjdk-11_osx-x64_bin.tar.gz")

def download32BitJdk = tasks.register('download32BitJdk', Download) {
  src 'https://github.com/wpilibsuite/frc-openjdk-windows/releases/download/v11.0.0u28-1/jdk-x86-11.0.0u28-1.zip'
  dest buildDir
  overwrite false
}

def jdk32File = file("$buildDir/jdk-x86-11.0.0u28-1.zip")

// def jdk32Location = file("$buildDir/jdk32")

// def extract32BitJdk = tasks.register('extract32BitJdk', Copy) {
//   dependsOn download32BitJdk
//   from zipTree(file("$buildDir/jdk-x86-11.0.0u28-1.zip")).matching{ include "jdk/**"}
//   into jdk32Location
//   eachFile { f->
//     f.path = f.path.substring(4) // length of jdk/
//   }
//   exclude '**/src.zip'
//   exclude '**/bin/*.pdb'
//   exclude '**/bin/*.map'
//   exclude '**/bin/server/*.pdb'
//   exclude '**/bin/server/*.map'
//   exclude '**/demo/**'

//   includeEmptyDirs = false
// }

def download64BitJdk = tasks.register('download64BitJdk', Download) {
  src 'https://download.java.net/java/GA/jdk11/28/GPL/openjdk-11+28_windows-x64_bin.zip'
  dest buildDir
  overwrite false
}

def jdk64File = file("$buildDir/openjdk-11+28_windows-x64_bin.zip")

// def jdk64Location = file("$buildDir/jdk64")

// def extract64BitJdk = tasks.register('extract64BitJdk', Copy) {
//   dependsOn download64BitJdk
//   from zipTree(file("$buildDir/openjdk-11+28_windows-x64_bin.zip")).matching{ include "jdk-11/**"}
//   into jdk64Location
//   eachFile { f->
//     f.path = f.path.substring(7) // length of jdk-11/
//   }

//   exclude '**/src.zip'

//   includeEmptyDirs = false
// }

def jdkConfigFile = file("$buildDir/jdkconfig.json")

def jdkConfigFileTask = tasks.register("jdkConfigFile") {
  it.outputs.file jdkConfigFile

  doLast {

    def config = [:]
    config['folder'] = 'jdk'
    config['tarFile'] = 'jdk.tar.gz'

    def gbuilder = getGsonBuilder()

    gbuilder.setPrettyPrinting()
    def json = gbuilder.create().toJson(config)

    jdkConfigFile.parentFile.mkdirs()

    jdkConfigFile.text = json
  }
}

ext.jdkZipSetup32 = { AbstractArchiveTask zip->
  zip.dependsOn download32BitJdk
  zip.dependsOn jdkConfigFileTask

  zip.inputs.file jdk32File
  zip.inputs.file jdkConfigFile

  zip.from(project.zipTree(jdk32File)) {

    eachFile { f->
      f.path = f.path.replace('jdk-11/', 'jdk/')
    }

    exclude '**/src.zip'
    exclude '**/bin/*.pdb'
    exclude '**/bin/*.map'
    exclude '**/bin/server/*.pdb'
    exclude '**/bin/server/*.map'
    exclude '**/demo/**'

    includeEmptyDirs = false
  }

  zip.from(jdkConfigFile) {
    into '/installUtils'
    rename {'jdkConfig.json'}
  }
}

ext.jdkZipSetup64 = { AbstractArchiveTask zip->
  zip.dependsOn download64BitJdk
  zip.dependsOn jdkConfigFileTask

  zip.inputs.file jdk64File
  zip.inputs.file jdkConfigFile

  zip.from(project.zipTree(jdk64File)) {

    eachFile { f->
      f.path = f.path.replace('jdk-11/', 'jdk/')
    }

    exclude '**/src.zip'
    exclude '**/bin/*.pdb'
    exclude '**/bin/*.map'
    exclude '**/bin/server/*.pdb'
    exclude '**/bin/server/*.map'
    exclude '**/demo/**'

    includeEmptyDirs = false
  }

    zip.from(jdkConfigFile) {
    into '/installUtils'
    rename {'jdkConfig.json'}
  }
}

ext.jdkZipSetupLinux = { AbstractArchiveTask zip->
  zip.dependsOn downloadLinuxJdk
  zip.dependsOn jdkConfigFileTask

  zip.inputs.file jdkLinuxFile
  zip.inputs.file jdkConfigFile

  zip.from(project.tarTree(project.resources.gzip(jdkLinuxFile))) {
    eachFile { f->
      f.path = f.path.replace('jdk-11/', 'jdk/')
    }

    exclude '**/src.zip'
    exclude '**/bin/*.pdb'
    exclude '**/bin/*.map'
    exclude '**/bin/server/*.pdb'
    exclude '**/bin/server/*.map'
    exclude '**/demo/**'

    includeEmptyDirs = false
  }

  zip.from(jdkConfigFile) {
    into '/installUtils'
    rename {'jdkConfig.json'}
  }
}

ext.jdkZipSetupMac = { AbstractArchiveTask zip->
  zip.dependsOn downloadMacJdk
  zip.dependsOn jdkConfigFileTask

  zip.inputs.file jdkMacFile
  zip.inputs.file jdkConfigFile

  zip.from(project.tarTree(project.resources.gzip(jdkMacFile))) {
    eachFile { f->
      f.path = f.path.replace('./jdk-11.jdk/Contents/Home/', 'jdk/')
    }

    exclude './jdk-11.jdk/Contents/MacOS/**'
    exclude './jdk-11.jdk/Contents/Info.plist'

    exclude '**/src.zip'
    exclude '**/bin/*.pdb'
    exclude '**/bin/*.map'
    exclude '**/bin/server/*.pdb'
    exclude '**/bin/server/*.map'
    exclude '**/demo/**'

    includeEmptyDirs = false
  }

    zip.from(jdkConfigFile) {
    into '/installUtils'
    rename {'jdkConfig.json'}
  }
}

ext.jdkZipSetup = { AbstractArchiveTask zip ->
  if (project.hasProperty('linuxBuild')) {
    jdkZipSetupLinux(zip)
  } else if (project.hasProperty('macBuild')) {
    jdkZipSetupMac(zip)
  } else if (project.hasProperty('windows32')) {
    jdkZipSetup32(zip)
  } else {
    jdkZipSetup64(zip)
  }
}
