

apply plugin: 'de.undercouch.download'


def downloadLinuxJdk = tasks.register('downloadLinuxJdk', Download) {
  src 'https://download.java.net/java/ga/jdk11/openjdk-11_linux-x64_bin.tar.gz'
  dest buildDir
  overwrite false
}

def jdkLinuxLocation = file("$buildDir/jdklinux")

def extractLinuxJdk = tasks.register('extractLinuxJdk', Copy) {
  dependsOn downloadLinuxJdk
  from zipTree(file("$buildDir/openjdk-11_linux-x64_bin.tar.gz")).matching{ include "jdk/**"}
  into jdkLinuxLocation
  eachFile { f->
    f.path = f.path.substring(4) // length of jdk/
  }
  exclude '**/src.zip'
  exclude '**/bin/*.pdb'
  exclude '**/bin/*.map'
  exclude '**/bin/server/*.pdb'
  exclude '**/bin/server/*.map'
  exclude '**/demo/**'

  includeEmptyDirs = false
}

def downloadMacJdk = tasks.register('downloadMacJdk', Download) {
  src 'https://download.java.net/java/ga/jdk11/openjdk-11_osx-x64_bin.tar.gz'
  dest buildDir
  overwrite false
}

def jdkMacLocation = file("$buildDir/jdkmac")

def extractMacJdk = tasks.register('extractMacJdk', Copy) {
  dependsOn downloadLinuxJdk
  from zipTree(file("$buildDir/openjdk-11_osx-x64_bin.tar.gz")).matching{ include "jdk/**"}
  into jdkMacLocation
  eachFile { f->
    f.path = f.path.substring(4) // length of jdk/
  }
  exclude '**/src.zip'
  exclude '**/bin/*.pdb'
  exclude '**/bin/*.map'
  exclude '**/bin/server/*.pdb'
  exclude '**/bin/server/*.map'
  exclude '**/demo/**'

  includeEmptyDirs = false
}

def download32BitJdk = tasks.register('download32BitJdk', Download) {
  src 'https://github.com/wpilibsuite/frc-openjdk-windows/releases/download/v11.0.0u28-1/jdk-x86-11.0.0u28-1.zip'
  dest buildDir
  overwrite false
}

def jdk32Location = file("$buildDir/jdk32")

def extract32BitJdk = tasks.register('extract32BitJdk', Copy) {
  dependsOn download32BitJdk
  from zipTree(file("$buildDir/jdk-x86-11.0.0u28-1.zip")).matching{ include "jdk/**"}
  into jdk32Location
  eachFile { f->
    f.path = f.path.substring(4) // length of jdk/
  }
  exclude '**/src.zip'
  exclude '**/bin/*.pdb'
  exclude '**/bin/*.map'
  exclude '**/bin/server/*.pdb'
  exclude '**/bin/server/*.map'
  exclude '**/demo/**'

  includeEmptyDirs = false
}

def download64BitJdk = tasks.register('download64BitJdk', Download) {
  src 'https://download.java.net/java/GA/jdk11/28/GPL/openjdk-11+28_windows-x64_bin.zip'
  dest buildDir
  overwrite false
}

def jdk64Location = file("$buildDir/jdk64")

def extract64BitJdk = tasks.register('extract64BitJdk', Copy) {
  dependsOn download64BitJdk
  from zipTree(file("$buildDir/openjdk-11+28_windows-x64_bin.zip")).matching{ include "jdk-11/**"}
  into jdk64Location
  eachFile { f->
    f.path = f.path.substring(7) // length of jdk-11/
  }

  exclude '**/src.zip'

  includeEmptyDirs = false
}

def jdkConfigFile = file("$buildDir/jdkconfig.json")

def jdkConfigFileTask = tasks.register("jdkConfigFile") {
  it.outputs.file jdkConfigFile

  doLast {

    def config = [:]
    config['folder'] = 'jdk'

    def gbuilder = getGsonBuilder()

    gbuilder.setPrettyPrinting()
    def json = gbuilder.create().toJson(config)

    jdk64ConfigFile.parentFile.mkdirs()

    jdk64ConfigFile.text = json
  }
}

ext.jdkZipSetup32 = { Zip zip->
  zip.dependsOn extract32BitJdk
  zip.dependsOn jdkConfigFileTask

  zip.inputs.dir jdk32Location
  zip.inputs.file jdkConfigFile

  zip.from(jdk32Location) {
    into '/jdk'
  }

  zip.from(jdkConfigFile) {
    into '/installUtils'
    rename {'jdkConfig.json'}
  }
}

ext.jdkZipSetup64 = { Zip zip->
  zip.dependsOn extract64BitJdk
  zip.dependsOn jdkConfigFileTask

  zip.inputs.dir jdk64Location
  zip.inputs.file jdkConfigFile

  zip.from(jdk64Location) {
    into '/jdk'
  }

    zip.from(jdkConfigFile) {
    into '/installUtils'
    rename {'jdkConfig.json'}
  }
}

ext.jdkZipSetupLinux = { Zip zip->
  zip.dependsOn extractLinuxJdk
  zip.dependsOn jdkConfigFileTask

  zip.inputs.dir jdkLinuxLocation
  zip.inputs.file jdkConfigFile

  zip.from(jdkLinuxLocation) {
    into '/jdk'
  }

  zip.from(jdkConfigFile) {
    into '/installUtils'
    rename {'jdkConfig.json'}
  }
}

ext.jdkZipSetupMac = { Zip zip->
  zip.dependsOn extractMacBitJdk
  zip.dependsOn jdkConfigFileTask

  zip.inputs.dir jdkMacLocation
  zip.inputs.file jdkConfigFile

  zip.from(jdkMacLocation) {
    into '/jdk'
  }

    zip.from(jdkConfigFile) {
    into '/installUtils'
    rename {'jdkConfig.json'}
  }
}

ext.jdkZipSetup = { Zip zip ->
  if (project.hasProperty('linuxBuild')) {
    jdkZipSetupLinux(zip)
  } else if (project.hasProperty('macBuild')) {
    jdkZipSetupMac(zip)
  } else if (project.hasProperty('windows32')) {
    jdkZipSetup32(zip)
  } else {
    jdkZipSetup64(zip)
  }
}
