evaluationDependsOn(':gradleriobase')

def otherDeps = []


configurations {
  offline
  tools
  documentationJava
  documentationCpp
}

def toolArtifacts = [
  'edu.wpi.first.shuffleboard:shuffleboard',
  'edu.wpi.first.wpilib:OutlineViewer',
  'edu.wpi.first.wpilib:SmartDashboard',
  'edu.wpi.first.wpilib:RobotBuilder',
  'edu.wpi.first.wpilib:PathWeaver'
]

dependencies {
    documentationCpp "edu.wpi.first.wpilibc:documentation:${project(':gradleriobase').wpi.wpilibVersion}@zip"
    documentationJava "edu.wpi.first.wpilibj:documentation:${project(':gradleriobase').wpi.wpilibVersion}@zip"
}

def lazyEvaluator = tasks.register('lazyModelEvaluation') {

  dependsOn project(':gradleriobase').tasks.named('modelEvaluationTrigger')
  doLast {
    def gradleRioDeps = project(':gradleriobase').getGradleRioDependencies()
    dependencies {
      gradleRioDeps.deps.each { dep->
        if (dep.classifier == null) {
          offline "$dep.groupId:$dep.artifactId:$dep.version:@$dep.extension"
        } else {
          offline "$dep.groupId:$dep.artifactId:$dep.version:$dep.classifier@$dep.extension"
        }

        toolArtifacts.each { tool->
          if ("$dep.groupId:$dep.artifactId" == tool) {
            if (dep.classifier == null) {
              tools "$dep.groupId:$dep.artifactId:$dep.version:@$dep.extension"
            } else {
              if (dep.classifier != 'sources' && dep.classifier != 'javadoc') {
                tools "$dep.groupId:$dep.artifactId:$dep.version:$dep.classifier@$dep.extension"
              }
            }
          }
        }
      }
    }
  }
}
repositories {
    project(':gradleriobase').getGradleRioUrls().each { gUrl->
        maven {
          url = gUrl
        }
    }
}

def cleanoffline = tasks.register("cleanOfflineRepository", Delete) {
  delete offlineRepositoryRoot
}

updateOfflineRepository.dependsOn cleanoffline
updateOfflineRepository.dependsOn lazyEvaluator

offlineDependencies {
  repositories {
    // You'll have to add your buildscript repositories here too
    project(':gradleriobase').getGradleRioUrls().each { gUrl->
      maven {
        url = gUrl
      }
    }
  }

  configurations 'offline'

  includeSources = true
  includeJavadocs = true
  includePoms = true
  includeIvyXmls = true
}

ext.mavenConfigSetup = {
  return new Tuple2({ task->
  }, { config->
    config['Maven'] = [:]
    config['Maven']['Folder'] = 'maven'

    if (project.ext.isUnix == true) {
      config['Maven']['MetaDataFixerExe'] = 'MavenMetaDataFixer.sh'
    } else {
      config['Maven']['MetaDataFixerExe'] = 'MavenMetaDataFixer.bat'
    }
  })
}

ext.mavenZipSetup = { AbstractArchiveTask zip->
  zip.dependsOn updateOfflineRepository
  zip.inputs.dir offlineRepositoryRoot
  zip.from(fileTree(offlineRepositoryRoot)) {
    into '/maven'
  }

  def file = configurations.documentationCpp.resolvedConfiguration.resolvedArtifacts.first().file

  zip.from(project.zipTree(configurations.documentationCpp.resolvedConfiguration.resolvedArtifacts.first().file)) {
    into '/documentation/cpp'
  }
  zip.from(project.zipTree(configurations.documentationJava.resolvedConfiguration.resolvedArtifacts.first().file)) {
    into '/documentation/java'
  }
}

