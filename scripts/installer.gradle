import org.gradle.internal.os.OperatingSystem

apply plugin: 'com.ullink.msbuild'
apply plugin: 'com.ullink.nuget'

def slnFile = 'DotNet/WPILibInstaller.sln'

evaluationDependsOn(':apps:MavenMetaDataFixer')
evaluationDependsOn(':apps:ToolsUpdater')

nugetSources {
  operation 'list'
}

nugetRestore {
  solutionFile slnFile
}

msbuild {
  dependsOn nugetRestore

  solutionFile slnFile

  targets = ['Clean', 'Rebuild']

  if (project.hasProperty('linuxBuild')) {
    parameters.platform = 'Linux'
  } else if (project.hasProperty('macBuild')) {
    parameters.platform = 'Mac'
  }

  parameters.configuration = 'Release'
}

ext.installerFile = file('DotNet/WPILibInstaller/bin/Release/Merged/WPILibSuite.exe')

ext.msBuildSetupMain = { AbstractArchiveTask zip->
  zip.dependsOn msbuild
  zip.inputs.file installerFile

  zip.from (installerFile)
}

def metaDataScriptBatch = file("$rootDir/files/MavenMetaDataFixer.bat")
def metaDataScriptSh = file("$rootDir/files/MavenMetaDataFixer.py")
def toolsUpdaterBatch = file("$rootDir/files/ToolsUpdater.bat")
def toolsUpdaterSh = file("$rootDir/files/ToolsUpdater.py")

ext.msBuildExtraSetup = { AbstractArchiveTask zip->
  //zip.dependsOn msbuild
  zip.inputs.file project(':apps:MavenMetaDataFixer').shadowJar.archivePath
  zip.inputs.file project(':apps:ToolsUpdater').shadowJar.archivePath
  zip.inputs.file metaDataScriptBatch
  zip.inputs.file metaDataScriptSh
  zip.inputs.file toolsUpdaterBatch
  zip.inputs.file toolsUpdaterSh

  zip.dependsOn project(':apps:MavenMetaDataFixer').shadowJar
  zip.dependsOn project(':apps:ToolsUpdater').shadowJar

  zip.from (project(':apps:MavenMetaDataFixer').shadowJar.archivePath) {
    into '/maven'
    rename { 'MavenMetaDataFixer.jar' }
  }

  if (project.ext.isUnix == true) {
    zip.from(metaDataScriptSh) {
      into '/maven'
      fileMode 0755
    }
  } else {
    zip.from(metaDataScriptBatch) {
      into '/maven'
    }
  }

  zip.from (project(':apps:ToolsUpdater').shadowJar.archivePath) {
    into '/tools'
    rename { 'ToolsUpdater.jar' }
  }

  if (project.ext.isUnix == true) {
    zip.from(toolsUpdaterSh) {
      into '/tools'
      fileMode 0755
    }
  } else {
    zip.from(toolsUpdaterBatch) {
      into '/tools'
    }
  }
}
