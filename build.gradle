import com.google.gson.GsonBuilder
import com.google.gson.Gson
import org.gradle.wrapper.*



buildscript {
    dependencies {
        classpath files('gradle/wrapper/gradle-wrapper.jar')
        classpath 'com.google.code.gson:gson:2.2.4'
    }
}

plugins {
    id 'java'
    id 'cpp'
    id "edu.wpi.first.GradleVsCode" version "0.4.2"
    id "com.ullink.msbuild" version "2.21" apply false
    id "com.ullink.nuget" version "2.16" apply false
    id "de.undercouch.download" version "3.4.3" apply false
    id "com.github.johnrengelman.shadow" version "2.0.4" apply false
}

apply plugin: io.pry.gradle.offline_dependencies.OfflineDependenciesPlugin

project.ext.setProperty('toolchain-missing-nofail', '')

if (project.hasProperty('linuxBuild')) {
    project.ext.forceNativeClassifier = 'linuxx86-64'
    project.ext.forceToolsClassifier = 'linux64'
    project.ext.buildClassifier = 'Linux'
    offlineRepositoryRoot = "$buildDir/dependencies/linux"
    project.ext.archiveType = Tar
    project.ext.isUnix = true
} else if (project.hasProperty('macBuild')) {
    project.ext.forceNativeClassifier = 'osxx86-64'
    project.ext.forceToolsClassifier = 'mac64'
    project.ext.buildClassifier = 'Mac'
    offlineRepositoryRoot = "$buildDir/dependencies/mac"
    project.ext.archiveType = Tar
    project.ext.isUnix = true
} else if (project.hasProperty('windows32')) {
    project.ext.forceNativeClassifier = 'windowsx86'
    project.ext.forceToolsClassifier = 'win32'
    project.ext.buildClassifier = 'Windows32'
    offlineRepositoryRoot = "$buildDir/dependencies/win32"
    project.ext.archiveType = Zip
    project.ext.isUnix = false
} else {
    project.ext.forceNativeClassifier = 'windowsx86-64'
    project.ext.forceToolsClassifier = 'win64'
    project.ext.buildClassifier = 'Windows64'
    offlineRepositoryRoot = "$buildDir/dependencies/win64"
    project.ext.archiveType = Zip
    project.ext.isUnix = false
}

wrapper {
    gradleVersion = '4.9'
}

ext.frcYear = '2019'

apply from: 'scripts/gradlew.gradle'
apply from: 'scripts/installer.gradle'

apply from: 'scripts/toolchain.gradle'
apply from: 'scripts/jdk.gradle'
apply from: 'scripts/maven.gradle'
// Tools must happen after maven
apply from: 'scripts/tools.gradle'
apply from: 'scripts/vscode.gradle'
apply from: 'scripts/vars.gradle'

ext.getGsonBuilder = {
    return new GsonBuilder()
}

def upgradeConfigFile = file("$buildDir/upgradeConfig.json")

def upgradeConfigFileTask = tasks.register('generateUpgradeConfigFile', Task) { Task task ->
    task.outputs.file upgradeConfigFile

    def configurations = []
    configurations << toolsConfig()
    configurations << mavenConfigSetup()
    configurations << varConfigSetup()

    configurations.each {
        it.first(task)
    }

    doLast {
        def config = [:]

        config['FrcYear'] = frcYear

        config['InstallerType'] = project.ext.buildClassifier

        configurations.each {
            it.second(config)
        }

        def gbuilder = getGsonBuilder()
        gbuilder.setPrettyPrinting()
        def json = gbuilder.create().toJson(config)

        upgradeConfigFile.parentFile.mkdirs()

        upgradeConfigFile.text = json
    }
}

def commonResources = { AbstractArchiveTask zip->
    zip.dependsOn upgradeConfigFileTask
    zip.inputs.file upgradeConfigFile

    zip.from (upgradeConfigFile) {
        into '/installUtils'
    }

    msBuildExtraSetup(zip)

    toolsSetup(zip)
    mavenZipSetup(zip)
    vscodeZipSetup(zip)
    varsZipSetup(zip)
}

def generateUpgradeResourcesTask = tasks.register('generateUpgradeResources', project.ext.archiveType) {
    baseName 'WPILib_UpgradeFiles-' + buildClassifier
    destinationDir file("$buildDir/outputs")
    duplicatesStrategy 'exclude'

    commonResources(it)

    if (project.ext.isUnix) {
        extension = 'tar.gz'
        compression = Compression.GZIP
    }
}

def generateUpgradeZipBaseTask = tasks.register('generateUpgradeZipBase', Zip) {
    baseName 'WPILibInstaller_Upgrade-' + buildClassifier
    destinationDir buildDir
    duplicatesStrategy 'exclude'

    dependsOn generateUpgradeResourcesTask
    inputs.file generateUpgradeResourcesTask.get().archivePath

    entryCompression = ZipEntryCompression.STORED

    // This MUST be first
    msBuildSetupMain(it)

    from (generateUpgradeResourcesTask.get().archivePath)
}


def upgradeInstallerName = "WPILibInstaller_Upgrade-${buildClassifier}.exe"
def upgradeInstaller = file("$buildDir/outputs/$upgradeInstallerName")

def upgradeInstallerTask = tasks.register('generateUpgradeInstaller', Task) {
    def zipFile = generateUpgradeZipBaseTask.get().archivePath
    inputs.file zipFile
    outputs.file upgradeInstaller

    dependsOn generateUpgradeZipBaseTask

    doLast {
        copy {
            from zipFile
            into "$buildDir/outputs"
            rename { upgradeInstallerName }
        }

        installerFile.withInputStream { InputStream inputStream ->
            RandomAccessFile foStream;
            try {
                foStream = new RandomAccessFile(upgradeInstaller, "rw");
                foStream.write(inputStream.getBytes())
            } finally {
                if (foStream != null) {
                    foStream.close();
                }
            }
        }
    }
}

def fullConfigFile = file("$buildDir/fullConfig.json")

def fullConfigFileTask = tasks.register('generateFullConfigFile', Task) { Task task ->
    task.outputs.file fullConfigFile

    def configurations = []
    configurations << gradleConfigTaskSetup()
    configurations << toolchainConfigTaskSetup()

    configurations.each {
        it.first(task)
    }

    doLast {
        def config = [:]

        configurations.each {
            it.second(config)
        }

        def gbuilder = new GsonBuilder()
        gbuilder.setPrettyPrinting()
        def json = gbuilder.create().toJson(config)

        fullConfigFile.parentFile.mkdirs()

        fullConfigFile.text = json
    }
}

def generateFullResourcesTask = tasks.register('generateFullResources', project.ext.archiveType) {
    baseName 'WPILib_FullFiles-' + buildClassifier
    destinationDir file("$buildDir/outputs")
    duplicatesStrategy 'exclude'


    if (project.ext.isUnix) {
        extension = 'tar.gz'
        compression = Compression.GZIP
    }

    dependsOn fullConfigFileTask
    inputs.file fullConfigFile

    it.from (fullConfigFile) {
        into '/installUtils'
    }

    commonResources(it)

    gradleZipTaskSetup(it)
    toolchainZipSetup(it)
    jdkZipSetup(it)
}

def generateFullZipBaseTask = tasks.register('generateFullZipBase', Zip) {
    baseName 'WPILibInstaller_Full-' + buildClassifier
    destinationDir buildDir
    duplicatesStrategy 'exclude'

    dependsOn generateFullResourcesTask
    inputs.file generateFullResourcesTask.get().archivePath

    entryCompression = ZipEntryCompression.STORED


    // This MUST be first
    msBuildSetupMain(it)

    from (generateFullResourcesTask.get().archivePath) {
        rename { 'files.zip' }
    }
}


def fullInstallerName = "WPILibInstaller_Full-${buildClassifier}.exe"
def fullInstaller = file("$buildDir/outputs/$fullInstallerName")

def fullInstallerTask = tasks.register('generateFullInstaller', Task) {
    def zipFile = generateFullZipBaseTask.get().archivePath
    inputs.file zipFile
    outputs.file fullInstaller

    dependsOn generateFullZipBaseTask

    doLast {
        copy {
            from zipFile
            into "$buildDir/outputs"
            rename { fullInstallerName }
        }

        installerFile.withInputStream { InputStream inputStream ->
            RandomAccessFile foStream;
            try {
                foStream = new RandomAccessFile(fullInstaller, "rw");
                foStream.write(inputStream.getBytes())
            } finally {
                if (foStream != null) {
                    foStream.close();
                }
            }
        }
    }
}

tasks.register('generateInstallers', Task) {
    dependsOn fullInstallerTask
    dependsOn upgradeInstallerTask
}
